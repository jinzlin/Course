package com.lin.course.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lin.course.db.entity.CourseListEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COURSE_LIST_ENTITY".
*/
public class CourseListEntityDao extends AbstractDao<CourseListEntity, Long> {

    public static final String TABLENAME = "COURSE_LIST_ENTITY";

    /**
     * Properties of entity CourseListEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CourseTitle = new Property(1, String.class, "courseTitle", false, "COURSE_TITLE");
        public final static Property CourseContent = new Property(2, String.class, "courseContent", false, "COURSE_CONTENT");
        public final static Property CourseType = new Property(3, String.class, "courseType", false, "COURSE_TYPE");
        public final static Property CourseLink = new Property(4, String.class, "courseLink", false, "COURSE_LINK");
        public final static Property CourseImg = new Property(5, String.class, "courseImg", false, "COURSE_IMG");
    }


    public CourseListEntityDao(DaoConfig config) {
        super(config);
    }
    
    public CourseListEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COURSE_LIST_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"COURSE_TITLE\" TEXT UNIQUE ," + // 1: courseTitle
                "\"COURSE_CONTENT\" TEXT," + // 2: courseContent
                "\"COURSE_TYPE\" TEXT," + // 3: courseType
                "\"COURSE_LINK\" TEXT," + // 4: courseLink
                "\"COURSE_IMG\" TEXT);"); // 5: courseImg
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COURSE_LIST_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CourseListEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String courseTitle = entity.getCourseTitle();
        if (courseTitle != null) {
            stmt.bindString(2, courseTitle);
        }
 
        String courseContent = entity.getCourseContent();
        if (courseContent != null) {
            stmt.bindString(3, courseContent);
        }
 
        String courseType = entity.getCourseType();
        if (courseType != null) {
            stmt.bindString(4, courseType);
        }
 
        String courseLink = entity.getCourseLink();
        if (courseLink != null) {
            stmt.bindString(5, courseLink);
        }
 
        String courseImg = entity.getCourseImg();
        if (courseImg != null) {
            stmt.bindString(6, courseImg);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CourseListEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String courseTitle = entity.getCourseTitle();
        if (courseTitle != null) {
            stmt.bindString(2, courseTitle);
        }
 
        String courseContent = entity.getCourseContent();
        if (courseContent != null) {
            stmt.bindString(3, courseContent);
        }
 
        String courseType = entity.getCourseType();
        if (courseType != null) {
            stmt.bindString(4, courseType);
        }
 
        String courseLink = entity.getCourseLink();
        if (courseLink != null) {
            stmt.bindString(5, courseLink);
        }
 
        String courseImg = entity.getCourseImg();
        if (courseImg != null) {
            stmt.bindString(6, courseImg);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CourseListEntity readEntity(Cursor cursor, int offset) {
        CourseListEntity entity = new CourseListEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // courseTitle
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // courseContent
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // courseType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // courseLink
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // courseImg
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CourseListEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCourseTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCourseContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCourseType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCourseLink(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCourseImg(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CourseListEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CourseListEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CourseListEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
